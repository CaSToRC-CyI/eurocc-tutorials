{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"tutorials/t01_introduction_to_hpc_systems/","text":"","title":"T01 introduction to hpc systems"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/","text":"Accessing and Navigating Cyclone Overview This tutorial provides a comprehensive guide for accessing and effectively using the Cyclone HPC system. You'll learn how to: Set up and manage SSH keys for secure access Connect securely to Cyclone from different operating systems Transfer files between your local machine and Cyclone Navigate the system using essential Linux commands Manage data across Cyclone's different storage areas Prerequisites A Cyclone account (contact your system administrator if you don't have one) A computer with internet connection Administrator rights or permission to install software (for some setup options) Getting Started For MacOS and Linux Users Open the Terminal application On MacOS: Use Spotlight (Command + Space) and type \"Terminal\" On Linux: Use your system's application launcher and search for \"Terminal\" Keep this Terminal window open throughout the setup process For Windows Users Choose your terminal: If using PowerShell: Search for \"PowerShell\" in the Start menu and run as Administrator If using Git Bash (recommended): Launch Git Bash from the Start menu 1. Setting Up SSH and your keys Remember to replace username with your actual Cyclone username in all examples. MacOS and Linux Using SSH keys is more secure and convenient than password authentication. Here's how to set them up: Managing SSH Keys Start the SSH agent: eval \"$(ssh-agent -s)\" Add your SSH key to the agent: If you used another filename or directory to store your ssh key you generated, make sure to change it ssh-add ~/.ssh/id_rsa SSH Config File Setup Navigate to your SSH directory: cd ~/.ssh/ To simplify connections create or edit ~/.ssh/config with nano: nano config In the nano editor, add these lines: Host cyclone HostName cyclone.hpcf.cyi.ac.cy User your_username IdentityFile ~/.ssh/id_rsa If you're using macOS, add this to your ~/.ssh/config file to make the key persistent: Host * UseKeychain yes AddKeysToAgent yes IdentityFile ~/.ssh/id_rsa Save the file: Press Ctrl + X Press Y to confirm Press Enter to save Return to your Terminal window to test the connection: ssh cyclone Windows Option 1: Using PowerShell 1. Start the SSH Agent Open PowerShell as Administrator Check if the SSH agent service is running: Get-Service ssh-agent If the service is stopped, enable and start it: # Set the service to manual startup Set-Service ssh-agent -StartupType Manual # Start the service Start-Service ssh-agent 2. Add Your SSH Key Add your private key to the SSH agent: ssh-add $env:USERPROFILE\\.ssh\\id_rsa Verify the key was added: ssh-add -l 3. Connect to Cyclone ssh username@cyclone.hpcf.cyi.ac.cy Replace username with your Cyclone username Option 2: Using Git Bash (Recommended) Using git bash doesn't require administrator permissions. Therefore this option will work even if Administrator restrictions apply on your computer. 1. Start Git Bash Download Git Bash from https://git-scm.com/downloads Install Git Bash accepting the default options Open Git Bash from your start menu 2. Add Your SSH Key ssh-add ~/.ssh/id_rsa 3. Create SSH Config (Optional but Recommended) Create or edit ~/.ssh/config : nano ~/.ssh/config Add these lines: Replace your_username with your Cyclone username Host cyclone HostName cyclone.hpcf.cyi.ac.cy User your_username IdentityFile ~/.ssh/id_rsa Save and close the file (Ctrl+X, then Y, then Enter) 5. Connect to Cyclone If using SSH config: ssh cyclone Without SSH config: ssh username@cyclone.hpcf.cyi.ac.cy When you successfully ssh/login, you'll be greeted with this message: If you are having trouble ssh/logging, refer to the troubleshooting steps at the end or try again the process from the beginning. 2. Managing Data and Directories on Cyclone: Home Directory Structure When you log in, your home directory ( /nvme/h/<username> ) typically contains: # Project data links data_p166/ -> /onyx/data/p166 # Shared project storage data_p184/ -> /onyx/data/p184 # Another project data_p213/ -> /onyx/data/p213 # And so on... # Scratch space link scratch/ -> /nvme/scratch/<username> # Personal scratch space # Scratch space link for event edu26/ -> /nvme/scratch/edu26 # Shared scratch space for events While these project directories (like data_p166/ ) will appear to be in your home directory, they are actually symbolic links (shortcuts) pointing to their real location on the /onyx/data/ storage system. This is why you'll see them listed when you run ls in your home directory, even though they're physically stored elsewhere. To see the contents of your own directory you can use the ls command when you login: ls -a # prints all files/directories, including hidden ones ls -l # prints visible directories in a list including important information like ownership, permissions, last date of modification ls -la # you can combine flags, this creates a list with all files/directories To see your current working directory: pwd Storage Systems 1. Home Directory ( /nvme/h/<username> ) Purpose : Personal persistent storage Features : Limited capacity Backed up regularly Contains symbolic links to project spaces Best for : Scripts and source code Configuration files Small, important files Symbolic links organization 2. Project Directories ( /onyx/data/p<XXX> ) Purpose : Shared project storage Accessed via : ~/data_p<XXX> symbolic links Features : Shared among project members Larger capacity Persistent storage Best for : Shared datasets Project results Collaborative work Long-term storage 3. Scratch Space ( /nvme/scratch/<username> ) Purpose : High-speed temporary storage Accessed via : ~/scratch symbolic link Features : High-performance I/O Temporary storage Files deleted after retention period Best for : Active job data Temporary files Performance-critical operations Directory Organization Best Practices Project Data Organization # In your project directory (e.g., ~/data_p166/) data_p166/ \u251c\u2500\u2500 datasets/ # Shared input data \u251c\u2500\u2500 results/ # Project results \u2502 \u251c\u2500\u2500 experiment1/ \u2502 \u2514\u2500\u2500 experiment2/ \u2514\u2500\u2500 shared_scripts/ # Project-specific scripts # In your scratch space scratch/ \u251c\u2500\u2500 job_outputs/ # Temporary job results \u251c\u2500\u2500 temp_data/ # Temporary processing \u2514\u2500\u2500 checkpoints/ # Job checkpoints Personal Organization # In your home directory scripts/ # Personal script collection \u251c\u2500\u2500 job_templates/ # Slurm job templates \u251c\u2500\u2500 analysis/ # Analysis scripts \u2514\u2500\u2500 utils/ # Utility scripts These directories aren't created by default, except the scratch and project specific parent directories Data Management Best Practices 1. Project Data Workflow Setting up a New Project Space Using the cd command to change directories: # Navigate to your project directory cd ~/data_p166 The ~/ we use in our commands points to the home directory Using the mkdir command to make a directory. # Create standard project structure mkdir -p datasets # For input data mkdir -p results # For processed results mkdir -p shared_scripts # For project-specific scripts mkdir -p documentation # For project documentation The -p makes sure that any parent directories that don't already exist are created. Working with Project Data # Create a workspace in scratch for processing mkdir -p ~/scratch/myanalysis cd ~/scratch/myanalysis # Copy input data to scratch for processing cp ~/data_p166/datasets/input.dat # After processing is complete, save important results cp -r results ~/data_p166/results/analysis_20240319 # Clean up scratch space cd ~ rm -rf ~/scratch/myanalysis 2. Space Management Using the du command to view storage usage Monitor storage: # Check project space usage du -h /onyx/data/p166 The -h flag makes the sizes 'human readable' meaning it's converting them from bytes to MB/GB/TB # Check scratch usage du -hs ~/scratch The -s flag summarizes the storage usage of the hole directory. So if you want file by file usage, remove s 3. Data Safety Keep important data in project directories Use scratch for temporary processing only Regularly clean scratch space Document data organization for team members Best Practices Summary Project Organization : Keep project data organized in project directories Use consistent structure across projects Data Management : Store shared data in project directories Use scratch for temporary processing Clean up scratch regularly Document organization for team members Job Workflow : Read input from project directories Process in scratch space Save results back to project directories Clean up scratch after job completion Collaboration : Use project directories for sharing Maintain consistent directory structure Document data organization Communicate changes with team members Remember that your project memberships determine both your compute resource allocation (via Slurm) and your access to shared storage spaces. Always specify the correct project ID in your Slurm jobs and organize your data accordingly. 3. Transferring Files Before starting: Open a terminal on your local machine (not on Cyclone) Make sure you know: The full path of the file/directory on your local machine Where you want it to go on Cyclone (or vice versa) 3.All commands below should be run from your local machine's terminal Using SCP (Secure Copy): Transferring FROM your local machine TO Cyclone: # Run this command on your local machine's terminal scp /path/on/your/local/machine/localfile.txt cyclone:~/destination/on/cyclone/ Transferring FROM Cyclone TO your local machine: # Run this command on your local machine's terminal scp cyclone:~/path/on/cyclone/remotefile.txt /path/on/your/local/machine/ If you have not created an ssh config file, replace cyclone with username@cyclone.hpcf.cyi.ac.cy This is what it should look like: Using Rsync (Recommended for Large Transfers) Copying FROM your local machine TO Cyclone: # Run this on your local machine's terminal # The refers to the current directory on your local machine rsync -avz local_directory/ cyclone:~/remote_directory/ Copying FROM Cyclone TO your local machine: # Run this on your local machine's terminal rsync -avz cyclone:~/remote_directory/ local_directory/ \ud83d\udca1 Note: All file transfer commands should be run from your local machine's terminal, not from within Cyclone. The paths before the colon (\\:) refer to your local machine, while paths after the colon refer to locations on Cyclone. Using FileZilla (Graphical Interface) Download and install FileZilla Go to Edit \u2192 Settings Go to SFTP Add your key If your key is in openssh format, you'll be prompted to convert your key. Press yes: Then input your passphrase: And then save the converted key. It's a good idea to keep it at the same place as the original in case you go looking for it in the future. Set up connection: Host: sftp://cyclone.hpcf.cyi.ac.cy Username: your_username Port: 22 Quick connect Once you're connected you'll see your local directory on the left and cyclone on the right. You can now just drag and drop between the two and the transfer wil happen automatically! Security Best Practices Use different keys for different services Regularly rotate keys (yearly) Always use strong passphrases Back up your private keys securely Never share private keys Troubleshooting SSH (MacOS/Linux/Git Bash) If you have ssh agend issues: Set Up SSH Agent Automatically Open or create the ~/.bashrc file: nano ~/.bashrc Add these lines to the file: # Start SSH agent if not running if [ -z \"$SSH_AUTH_SOCK\" ] ; then eval `ssh-agent -s` > /dev/null fi Save and close the file (Ctrl+X, then Y, then Enter) Reload the configuration: source ~/.bashrc If you have connection issues: Check SSH agent: ssh-add -l #This will list all of your added keys Verify permissions: chmod 700 ~/.ssh chmod 600 ~/.ssh/id_rsa chmod 644 ~/.ssh/id_rsa.pub This makes sure your private/public key and the directory they are in have the correct read write and execute permissions for the ssh client to allow a connection. Test connection with verbose output: ssh -v cyclone # Adding the `-v` flag prints debuging information Troubleshooting SSH (Powershell) If your key doesn't have the correct permissions: icacls <path-to-your-id_rsa> /inheritance:r /grant:r \"$($env:USERNAME):(F)\" Remember to replace username with your actual Cyclone username in all examples.","title":"T02 accessing and navigating cyclone"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#accessing-and-navigating-cyclone","text":"","title":"Accessing and Navigating Cyclone"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#overview","text":"This tutorial provides a comprehensive guide for accessing and effectively using the Cyclone HPC system. You'll learn how to: Set up and manage SSH keys for secure access Connect securely to Cyclone from different operating systems Transfer files between your local machine and Cyclone Navigate the system using essential Linux commands Manage data across Cyclone's different storage areas","title":"Overview"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#prerequisites","text":"A Cyclone account (contact your system administrator if you don't have one) A computer with internet connection Administrator rights or permission to install software (for some setup options)","title":"Prerequisites"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#getting-started","text":"","title":"Getting Started"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#for-macos-and-linux-users","text":"Open the Terminal application On MacOS: Use Spotlight (Command + Space) and type \"Terminal\" On Linux: Use your system's application launcher and search for \"Terminal\" Keep this Terminal window open throughout the setup process","title":"For MacOS and Linux Users"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#for-windows-users","text":"Choose your terminal: If using PowerShell: Search for \"PowerShell\" in the Start menu and run as Administrator If using Git Bash (recommended): Launch Git Bash from the Start menu","title":"For Windows Users"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#1-setting-up-ssh-and-your-keys","text":"Remember to replace username with your actual Cyclone username in all examples.","title":"1. Setting Up SSH and your keys"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#macos-and-linux","text":"Using SSH keys is more secure and convenient than password authentication. Here's how to set them up:","title":"MacOS and Linux"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#managing-ssh-keys","text":"Start the SSH agent: eval \"$(ssh-agent -s)\" Add your SSH key to the agent: If you used another filename or directory to store your ssh key you generated, make sure to change it ssh-add ~/.ssh/id_rsa","title":"Managing SSH Keys"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#ssh-config-file-setup","text":"Navigate to your SSH directory: cd ~/.ssh/ To simplify connections create or edit ~/.ssh/config with nano: nano config In the nano editor, add these lines: Host cyclone HostName cyclone.hpcf.cyi.ac.cy User your_username IdentityFile ~/.ssh/id_rsa If you're using macOS, add this to your ~/.ssh/config file to make the key persistent: Host * UseKeychain yes AddKeysToAgent yes IdentityFile ~/.ssh/id_rsa Save the file: Press Ctrl + X Press Y to confirm Press Enter to save Return to your Terminal window to test the connection: ssh cyclone","title":"SSH Config File Setup"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#windows","text":"","title":"Windows"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#option-1-using-powershell","text":"","title":"Option 1: Using PowerShell"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#1-start-the-ssh-agent","text":"Open PowerShell as Administrator Check if the SSH agent service is running: Get-Service ssh-agent If the service is stopped, enable and start it: # Set the service to manual startup Set-Service ssh-agent -StartupType Manual # Start the service Start-Service ssh-agent","title":"1. Start the SSH Agent"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#2-add-your-ssh-key","text":"Add your private key to the SSH agent: ssh-add $env:USERPROFILE\\.ssh\\id_rsa Verify the key was added: ssh-add -l","title":"2. Add Your SSH Key"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#3-connect-to-cyclone","text":"ssh username@cyclone.hpcf.cyi.ac.cy Replace username with your Cyclone username","title":"3. Connect to Cyclone"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#option-2-using-git-bash-recommended","text":"Using git bash doesn't require administrator permissions. Therefore this option will work even if Administrator restrictions apply on your computer.","title":"Option 2: Using Git Bash (Recommended)"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#1-start-git-bash","text":"Download Git Bash from https://git-scm.com/downloads Install Git Bash accepting the default options Open Git Bash from your start menu","title":"1. Start Git Bash"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#2-add-your-ssh-key_1","text":"ssh-add ~/.ssh/id_rsa","title":"2. Add Your SSH Key"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#3-create-ssh-config-optional-but-recommended","text":"Create or edit ~/.ssh/config : nano ~/.ssh/config Add these lines: Replace your_username with your Cyclone username Host cyclone HostName cyclone.hpcf.cyi.ac.cy User your_username IdentityFile ~/.ssh/id_rsa Save and close the file (Ctrl+X, then Y, then Enter)","title":"3. Create SSH Config (Optional but Recommended)"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#5-connect-to-cyclone","text":"If using SSH config: ssh cyclone Without SSH config: ssh username@cyclone.hpcf.cyi.ac.cy When you successfully ssh/login, you'll be greeted with this message: If you are having trouble ssh/logging, refer to the troubleshooting steps at the end or try again the process from the beginning.","title":"5. Connect to Cyclone"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#2-managing-data-and-directories-on-cyclone","text":"","title":"2. Managing Data and Directories on Cyclone:"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#home-directory-structure","text":"When you log in, your home directory ( /nvme/h/<username> ) typically contains: # Project data links data_p166/ -> /onyx/data/p166 # Shared project storage data_p184/ -> /onyx/data/p184 # Another project data_p213/ -> /onyx/data/p213 # And so on... # Scratch space link scratch/ -> /nvme/scratch/<username> # Personal scratch space # Scratch space link for event edu26/ -> /nvme/scratch/edu26 # Shared scratch space for events While these project directories (like data_p166/ ) will appear to be in your home directory, they are actually symbolic links (shortcuts) pointing to their real location on the /onyx/data/ storage system. This is why you'll see them listed when you run ls in your home directory, even though they're physically stored elsewhere. To see the contents of your own directory you can use the ls command when you login: ls -a # prints all files/directories, including hidden ones ls -l # prints visible directories in a list including important information like ownership, permissions, last date of modification ls -la # you can combine flags, this creates a list with all files/directories To see your current working directory: pwd","title":"Home Directory Structure"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#storage-systems","text":"","title":"Storage Systems"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#1-home-directory-nvmehusername","text":"Purpose : Personal persistent storage Features : Limited capacity Backed up regularly Contains symbolic links to project spaces Best for : Scripts and source code Configuration files Small, important files Symbolic links organization","title":"1. Home Directory (/nvme/h/&lt;username&gt;)"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#2-project-directories-onyxdatapxxx","text":"Purpose : Shared project storage Accessed via : ~/data_p<XXX> symbolic links Features : Shared among project members Larger capacity Persistent storage Best for : Shared datasets Project results Collaborative work Long-term storage","title":"2. Project Directories (/onyx/data/p&lt;XXX&gt;)"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#3-scratch-space-nvmescratchusername","text":"Purpose : High-speed temporary storage Accessed via : ~/scratch symbolic link Features : High-performance I/O Temporary storage Files deleted after retention period Best for : Active job data Temporary files Performance-critical operations","title":"3. Scratch Space (/nvme/scratch/&lt;username&gt;)"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#directory-organization-best-practices","text":"","title":"Directory Organization Best Practices"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#project-data-organization","text":"# In your project directory (e.g., ~/data_p166/) data_p166/ \u251c\u2500\u2500 datasets/ # Shared input data \u251c\u2500\u2500 results/ # Project results \u2502 \u251c\u2500\u2500 experiment1/ \u2502 \u2514\u2500\u2500 experiment2/ \u2514\u2500\u2500 shared_scripts/ # Project-specific scripts # In your scratch space scratch/ \u251c\u2500\u2500 job_outputs/ # Temporary job results \u251c\u2500\u2500 temp_data/ # Temporary processing \u2514\u2500\u2500 checkpoints/ # Job checkpoints","title":"Project Data Organization"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#personal-organization","text":"# In your home directory scripts/ # Personal script collection \u251c\u2500\u2500 job_templates/ # Slurm job templates \u251c\u2500\u2500 analysis/ # Analysis scripts \u2514\u2500\u2500 utils/ # Utility scripts These directories aren't created by default, except the scratch and project specific parent directories","title":"Personal Organization"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#data-management-best-practices","text":"","title":"Data Management Best Practices"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#1-project-data-workflow","text":"","title":"1. Project Data Workflow"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#setting-up-a-new-project-space","text":"Using the cd command to change directories: # Navigate to your project directory cd ~/data_p166 The ~/ we use in our commands points to the home directory Using the mkdir command to make a directory. # Create standard project structure mkdir -p datasets # For input data mkdir -p results # For processed results mkdir -p shared_scripts # For project-specific scripts mkdir -p documentation # For project documentation The -p makes sure that any parent directories that don't already exist are created.","title":"Setting up a New Project Space"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#working-with-project-data","text":"# Create a workspace in scratch for processing mkdir -p ~/scratch/myanalysis cd ~/scratch/myanalysis # Copy input data to scratch for processing cp ~/data_p166/datasets/input.dat # After processing is complete, save important results cp -r results ~/data_p166/results/analysis_20240319 # Clean up scratch space cd ~ rm -rf ~/scratch/myanalysis","title":"Working with Project Data"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#2-space-management","text":"Using the du command to view storage usage Monitor storage: # Check project space usage du -h /onyx/data/p166 The -h flag makes the sizes 'human readable' meaning it's converting them from bytes to MB/GB/TB # Check scratch usage du -hs ~/scratch The -s flag summarizes the storage usage of the hole directory. So if you want file by file usage, remove s","title":"2. Space Management"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#3-data-safety","text":"Keep important data in project directories Use scratch for temporary processing only Regularly clean scratch space Document data organization for team members","title":"3. Data Safety"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#best-practices-summary","text":"Project Organization : Keep project data organized in project directories Use consistent structure across projects Data Management : Store shared data in project directories Use scratch for temporary processing Clean up scratch regularly Document organization for team members Job Workflow : Read input from project directories Process in scratch space Save results back to project directories Clean up scratch after job completion Collaboration : Use project directories for sharing Maintain consistent directory structure Document data organization Communicate changes with team members Remember that your project memberships determine both your compute resource allocation (via Slurm) and your access to shared storage spaces. Always specify the correct project ID in your Slurm jobs and organize your data accordingly.","title":"Best Practices Summary"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#3-transferring-files","text":"","title":"3. Transferring Files"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#before-starting","text":"Open a terminal on your local machine (not on Cyclone) Make sure you know: The full path of the file/directory on your local machine Where you want it to go on Cyclone (or vice versa) 3.All commands below should be run from your local machine's terminal","title":"Before starting:"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#using-scp-secure-copy","text":"","title":"Using SCP (Secure Copy):"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#transferring-from-your-local-machine-to-cyclone","text":"# Run this command on your local machine's terminal scp /path/on/your/local/machine/localfile.txt cyclone:~/destination/on/cyclone/","title":"Transferring FROM your local machine TO Cyclone:"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#transferring-from-cyclone-to-your-local-machine","text":"# Run this command on your local machine's terminal scp cyclone:~/path/on/cyclone/remotefile.txt /path/on/your/local/machine/","title":"Transferring FROM Cyclone TO your local machine:"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#if-you-have-not-created-an-ssh-config-file-replace-cyclone-with-usernamecyclonehpcfcyiaccy","text":"","title":"If you have not created an ssh config file, replace cyclone with username@cyclone.hpcf.cyi.ac.cy"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#this-is-what-it-should-look-like","text":"","title":"This is what it should look like:"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#using-rsync-recommended-for-large-transfers","text":"","title":"Using Rsync (Recommended for Large Transfers)"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#copying-from-your-local-machine-to-cyclone","text":"# Run this on your local machine's terminal # The refers to the current directory on your local machine rsync -avz local_directory/ cyclone:~/remote_directory/","title":"Copying FROM your local machine TO Cyclone:"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#copying-from-cyclone-to-your-local-machine","text":"# Run this on your local machine's terminal rsync -avz cyclone:~/remote_directory/ local_directory/ \ud83d\udca1 Note: All file transfer commands should be run from your local machine's terminal, not from within Cyclone. The paths before the colon (\\:) refer to your local machine, while paths after the colon refer to locations on Cyclone.","title":"Copying FROM Cyclone TO your local machine:"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#using-filezilla-graphical-interface","text":"Download and install FileZilla Go to Edit \u2192 Settings Go to SFTP Add your key If your key is in openssh format, you'll be prompted to convert your key. Press yes: Then input your passphrase: And then save the converted key. It's a good idea to keep it at the same place as the original in case you go looking for it in the future. Set up connection: Host: sftp://cyclone.hpcf.cyi.ac.cy Username: your_username Port: 22 Quick connect Once you're connected you'll see your local directory on the left and cyclone on the right. You can now just drag and drop between the two and the transfer wil happen automatically!","title":"Using FileZilla (Graphical Interface)"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#security-best-practices","text":"Use different keys for different services Regularly rotate keys (yearly) Always use strong passphrases Back up your private keys securely Never share private keys","title":"Security Best Practices"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#troubleshooting-ssh-macoslinuxgit-bash","text":"","title":"Troubleshooting SSH (MacOS/Linux/Git Bash)"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#if-you-have-ssh-agend-issues","text":"","title":"If you have ssh agend issues:"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#set-up-ssh-agent-automatically","text":"Open or create the ~/.bashrc file: nano ~/.bashrc Add these lines to the file: # Start SSH agent if not running if [ -z \"$SSH_AUTH_SOCK\" ] ; then eval `ssh-agent -s` > /dev/null fi Save and close the file (Ctrl+X, then Y, then Enter) Reload the configuration: source ~/.bashrc","title":"Set Up SSH Agent Automatically"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#if-you-have-connection-issues","text":"Check SSH agent: ssh-add -l #This will list all of your added keys Verify permissions: chmod 700 ~/.ssh chmod 600 ~/.ssh/id_rsa chmod 644 ~/.ssh/id_rsa.pub This makes sure your private/public key and the directory they are in have the correct read write and execute permissions for the ssh client to allow a connection. Test connection with verbose output: ssh -v cyclone # Adding the `-v` flag prints debuging information","title":"If you have connection issues:"},{"location":"tutorials/t02_accessing_and_navigating_cyclone/#troubleshooting-ssh-powershell","text":"If your key doesn't have the correct permissions: icacls <path-to-your-id_rsa> /inheritance:r /grant:r \"$($env:USERNAME):(F)\" Remember to replace username with your actual Cyclone username in all examples.","title":"Troubleshooting SSH (Powershell)"},{"location":"tutorials/t03_setting_up_and_using_development_tools/","text":"","title":"T03 setting up and using development tools"},{"location":"tutorials/t04_scaling_python_workloads/","text":"","title":"T04 scaling python workloads"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/","text":"Compiling C/C++ Source Code on HPC Systems Compiling efficient C/C++ code on High-Performance Computing (HPC) systems is crucial for leveraging the available computational resources. This tutorial will guide you through the process, covering compiler options, optimization flags, and performance testing. 1. Common Compilers on HPC Systems Different HPC systems support a variety of compilers tailored to specific hardware architectures: GCC (GNU Compiler Collection) : Open-source, widely used, supports many architectures. Intel C/C++ Compiler (icc) : Optimized for Intel processors, often provides better performance on Intel hardware. NVCC (NVIDIA Compiler) : For compiling CUDA programs targeting NVIDIA GPUs. Clang/LLVM : A modern compiler offering competitive performance and tools. Cray Compiler : Designed for Cray systems, with excellent support for vectorization and optimization. 2. Using the module Command Most HPC systems manage software environments using the module command. Modules allow you to load specific versions of compilers and other software. To view available compilers, use: module avail To load a specific compiler module: module load <compiler_name>/<version> For example, to load GCC version 12.1: module load gcc/12.1 To see which modules are currently loaded: module list 3. Optimization Flags Compilers offer optimization flags to improve performance. Commonly used flags include: General Optimization Levels: -O0 : No optimization (default). -O1 : Basic optimizations. -O2 : Moderate optimizations without impacting debugging. -O3 : Aggressive optimizations, often enabling vectorization and loop unrolling. Advanced Flags: -ffast-math : Enables faster floating-point calculations (may reduce precision). -funroll-loops : Unrolls loops to reduce overhead. -march=native : Optimizes code for the architecture of the system being used. -flto : Enables link-time optimization. -fopenmp : Enables OpenMP for parallel programming. Each compiler has its specific flags. Refer to its documentation for more options. 4. Example Code Here's an example C++ code that performs matrix multiplication: #include <iostream> #include <vector> #include <chrono> void matrixMultiply(const std::vector<std::vector<double>>& A, const std::vector<std::vector<double>>& B, std::vector<std::vector<double>>& C, int N) { for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { for (int k = 0; k < N; k++) { C[i][j] += A[i][k] * B[k][j]; } } } } int main(int argc, char* argv[]) { const int N = 512; std::vector<std::vector<double>> A(N, std::vector<double>(N, 1.0)); std::vector<std::vector<double>> B(N, std::vector<double>(N, 2.0)); std::vector<std::vector<double>> C(N, std::vector<double>(N, 0.0)); auto start = std::chrono::high_resolution_clock::now(); matrixMultiply(A, B, C, N); auto end = std::chrono::high_resolution_clock::now(); std::chrono::duration<double> elapsed = end - start; std::cout << \"Executable: \" << argv[0] << std::endl; std::cout << \"Matrix multiplication completed in \" << elapsed.count() << \" seconds.\" << std::endl; return 0; } 5. Compiling and Testing Compile Without Optimization: g++ -O0 matrix_multiply.cpp -o matrix_multiply Run it and note the runtime. Compile with Optimization: g++ -O3 -march=native -funroll-loops matrix_multiply.cpp -o matrix_multiply_optimized Run it and compare the runtime with the non-optimized version. Additional Testing with Intel Compiler: If available, try compiling with Intel's compiler: module load intel icc -O3 -xHost -ipo matrix_multiply.cpp -o matrix_multiply_intel 6. Performance Testing Tools for Performance Testing: time command : Measures execution time. bash time ./matrix_multiply time ./matrix_multiply_optimized time ./matrix_multiply_intel Profiler tools : gprof (GCC): Use -pg during compilation for profiling. Intel VTune Profiler : Optimizes performance on Intel hardware. nvprof (NVIDIA): For profiling GPU-based applications. 7. Conclusion Efficient compilation and optimization are crucial for HPC workloads. Understanding the available compilers, their flags, and how to test performance enables you to maximize the potential of your code on an HPC system.","title":"T05 compiling and running code with slurm"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#compiling-cc-source-code-on-hpc-systems","text":"Compiling efficient C/C++ code on High-Performance Computing (HPC) systems is crucial for leveraging the available computational resources. This tutorial will guide you through the process, covering compiler options, optimization flags, and performance testing.","title":"Compiling C/C++ Source Code on HPC Systems"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#1-common-compilers-on-hpc-systems","text":"Different HPC systems support a variety of compilers tailored to specific hardware architectures: GCC (GNU Compiler Collection) : Open-source, widely used, supports many architectures. Intel C/C++ Compiler (icc) : Optimized for Intel processors, often provides better performance on Intel hardware. NVCC (NVIDIA Compiler) : For compiling CUDA programs targeting NVIDIA GPUs. Clang/LLVM : A modern compiler offering competitive performance and tools. Cray Compiler : Designed for Cray systems, with excellent support for vectorization and optimization.","title":"1. Common Compilers on HPC Systems"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#2-using-the-module-command","text":"Most HPC systems manage software environments using the module command. Modules allow you to load specific versions of compilers and other software. To view available compilers, use: module avail To load a specific compiler module: module load <compiler_name>/<version> For example, to load GCC version 12.1: module load gcc/12.1 To see which modules are currently loaded: module list","title":"2. Using the module Command"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#3-optimization-flags","text":"Compilers offer optimization flags to improve performance. Commonly used flags include:","title":"3. Optimization Flags"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#general-optimization-levels","text":"-O0 : No optimization (default). -O1 : Basic optimizations. -O2 : Moderate optimizations without impacting debugging. -O3 : Aggressive optimizations, often enabling vectorization and loop unrolling.","title":"General Optimization Levels:"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#advanced-flags","text":"-ffast-math : Enables faster floating-point calculations (may reduce precision). -funroll-loops : Unrolls loops to reduce overhead. -march=native : Optimizes code for the architecture of the system being used. -flto : Enables link-time optimization. -fopenmp : Enables OpenMP for parallel programming. Each compiler has its specific flags. Refer to its documentation for more options.","title":"Advanced Flags:"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#4-example-code","text":"Here's an example C++ code that performs matrix multiplication: #include <iostream> #include <vector> #include <chrono> void matrixMultiply(const std::vector<std::vector<double>>& A, const std::vector<std::vector<double>>& B, std::vector<std::vector<double>>& C, int N) { for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { for (int k = 0; k < N; k++) { C[i][j] += A[i][k] * B[k][j]; } } } } int main(int argc, char* argv[]) { const int N = 512; std::vector<std::vector<double>> A(N, std::vector<double>(N, 1.0)); std::vector<std::vector<double>> B(N, std::vector<double>(N, 2.0)); std::vector<std::vector<double>> C(N, std::vector<double>(N, 0.0)); auto start = std::chrono::high_resolution_clock::now(); matrixMultiply(A, B, C, N); auto end = std::chrono::high_resolution_clock::now(); std::chrono::duration<double> elapsed = end - start; std::cout << \"Executable: \" << argv[0] << std::endl; std::cout << \"Matrix multiplication completed in \" << elapsed.count() << \" seconds.\" << std::endl; return 0; }","title":"4. Example Code"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#5-compiling-and-testing","text":"","title":"5. Compiling and Testing"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#compile-without-optimization","text":"g++ -O0 matrix_multiply.cpp -o matrix_multiply Run it and note the runtime.","title":"Compile Without Optimization:"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#compile-with-optimization","text":"g++ -O3 -march=native -funroll-loops matrix_multiply.cpp -o matrix_multiply_optimized Run it and compare the runtime with the non-optimized version.","title":"Compile with Optimization:"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#additional-testing-with-intel-compiler","text":"If available, try compiling with Intel's compiler: module load intel icc -O3 -xHost -ipo matrix_multiply.cpp -o matrix_multiply_intel","title":"Additional Testing with Intel Compiler:"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#6-performance-testing","text":"","title":"6. Performance Testing"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#tools-for-performance-testing","text":"time command : Measures execution time. bash time ./matrix_multiply time ./matrix_multiply_optimized time ./matrix_multiply_intel Profiler tools : gprof (GCC): Use -pg during compilation for profiling. Intel VTune Profiler : Optimizes performance on Intel hardware. nvprof (NVIDIA): For profiling GPU-based applications.","title":"Tools for Performance Testing:"},{"location":"tutorials/t05_compiling_and_running_code_with_slurm/#7-conclusion","text":"Efficient compilation and optimization are crucial for HPC workloads. Understanding the available compilers, their flags, and how to test performance enables you to maximize the potential of your code on an HPC system.","title":"7. Conclusion"},{"location":"tutorials/t06_interactive_computing_with_jupyter_notebooks/","text":"","title":"T06 interactive computing with jupyter notebooks"}]}